1.vue允许使用模板语法来声明式的将数据渲染进DOM系统。
//HTML
<div id="app">
  {{ message }}
</div>

//JS
var app = new Vue({
  el: '#app',
  data: {
    message: 'Hello Vue!'
  }
})
2.vue指令（v-开头）指令在DOM中使用，属性props在JS中使用（v-x:Y.Z="..."）
v-bind绑定    :
v-for循环
v-if条件
v-else
v-on事件监听，调用在vue实例中定义的方法    @
v-model表单输入与应用状态之间的双向绑定
v-html：
3.实例生命周期钩子
created：在一个实例被创建以后执行代码
mounted：
updated：
destroyed：
生命周期钩子的this上下文指向调用他的vue实例
4.计算属性：计算属性是基于它们的响应式依赖进行缓存的，只在相关响应式依赖发生改变时它们才会重新求值
var vm = new Vue({
  el: '#example',
  data: {
    message: 'Hello'
  },
  computed: {
    // 计算属性的 getter
    reversedMessage: function () {
      // `this` 指向 vm 实例
      return this.message.split('').reverse().join('')
    }
  }
})
侦听属性：当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的
watch：
方法：每当触发重新渲染时，调用方法将总会再次执行函数
// 在组件中
methods: {
  reversedMessage: function () {
    return this.message.split('').reverse().join('')
  }
}
5.class与style的绑定
绑定HTML class
我们可以传给 v-bind:class 一个对象，以动态地切换 class：v-bind:class 指令也可以与普通的 class 属性共存。当有如下模板:
<div v-bind:class="{ active: isActive }"></div>
我们可以把一个数组传给 v-bind:class，以应用一个 class 列表：
<div v-bind:class="[activeClass, errorClass]"></div>

data: {
  activeClass: 'active',
  errorClass: 'text-danger'
}
有多个条件 class 时这样写有些繁琐。所以在数组语法中也可以使用对象语法：
<div v-bind:class="[{ active: isActive }, errorClass]"></div>
用在组件上：
<my-component v-bind:class="{ active: isActive }"></my-component>


绑定内联样式
对象语法：
<div v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }"></div>
data: {
  activeColor: 'red',
  fontSize: 30
}
或者
<div v-bind:style="styleObject"></div>
data: {
  styleObject: {
    color: 'red',
    fontSize: '13px'
  }
}
数组语法：
<div v-bind:style="[baseStyles, overridingStyles]"></div>

6.条件渲染
<h1 v-if="awesome">Vue is awesome!</h1>
<h1 v-else>Oh no 😢</h1>


<div v-if="type === 'A'">
  A
</div>
<div v-else-if="type === 'B'">
  B
</div>
<div v-else-if="type === 'C'">
  C
</div>
<div v-else>
  Not A/B/C
</div>


<h1 v-show="ok">Hello!</h1>
带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。

v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。

v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。

相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。

一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。

当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。不推荐一起使用
7.v-for
我们用 v-for 指令根据一组数组的选项列表进行渲染。v-for 指令需要使用 item in items 形式的特殊语法，items 是源数据数组并且 item 是数组元素迭代的别名
<ul id="example-1">
  <li v-for="item in items">
    {{ item.message }}
  </li>
</ul>

var example1 = new Vue({
  el: '#example-1',
  data: {
    items: [
      { message: 'Foo' },
      { message: 'Bar' }
    ]
  }
})

<ul id="example-2">
  <li v-for="(item, index) in items">
    {{ parentMessage }} - {{ index }} - {{ item.message }}
  </li>
</ul>

可以用 of 替代 in 作为分隔符，因为它是最接近 JavaScript 迭代器的语法：

一个对象的v-for：可以用 v-for 通过一个对象的属性来迭代。
<ul id="v-for-object" class="demo">
  <li v-for="value in object">
    {{ value }}
  </li>
</ul>

or

<div v-for="(value, name) in object">
  {{ name }}: {{ value }}
</div>

or

<div v-for="(value, name, index) in object">
  {{ index }}. {{ name }}: {{ value }}
</div>


new Vue({
  el: '#v-for-object',
  data: {
    object: {
      title: 'How to do lists in Vue',
      author: 'Jane Doe',
      publishedAt: '2016-04-10'
    }
  }
})
在遍历对象时，是按 Object.keys() 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下是一致的。

维护状态：
就地复用原则：为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性：
<div v-for="item in items" v-bind:key="item.id">
  <!-- 内容 -->
</div>

数组更新检测：Vue 包含一组观察数组的变异方法，会改变被这些方法调用的原始数组，所以它们也将会触发视图更新。这些方法如下：
push()
pop()
shift()
unshift()
splice()
sort()
reverse()
非变异 (non-mutating method) 方法，例如：filter(), concat() 和 slice() 。这些不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组：
由于 JavaScript 的限制，Vue 不能检测以下变动的数组：

当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue
当你修改数组的长度时，例如：vm.items.length = newLength，Vue 不能检测对象属性的添加或删除：
任何数据都不会被自动传递到组件里，因为组件有自己独立的作用域。为了把迭代数据传递到组件里，我们要用 props ：
8.事件处理：
监听事件：用 v-on 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码
事件处理方法：许多事件处理逻辑会更为复杂，所以直接把 JavaScript 代码写在 v-on 指令中是不可行的。因此 v-on 还可以接收一个需要调用的方法名称。
内联处理器中的方法:在内联 JavaScript 语句中调用方法：在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：
事件修饰符:修饰符是由点开头的指令后缀来表示的.顺序很重要；相应的代码会以同样的顺序产生
.stop
.prevent
.capture
.self
.once
.passive
不要把 .passive 和 .prevent 一起使用，因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，.passive 会告诉浏览器你不想阻止事件的默认行为。
按键修饰符：
<input v-on:keyup.enter="submit">
<input v-on:keyup.page-down="onPageDown">
系统修饰符：<!-- Alt + C -->
<input @keyup.alt.67="clear">

<!-- Ctrl + Click -->
<div @click.ctrl="doSomething">Do something</div>
鼠标按钮修饰符：
.left
.right
.middle
为什么在HTML中监听事件
扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。

因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。

当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何清理它们

9.表单输入绑定
基础用法：用 v-model 指令在表单 <input>、<textarea> 及 <select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。
v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：

text 和 textarea 元素使用 value 属性和 input 事件；
checkbox 和 radio 使用 checked 属性和 change 事件；
select 字段将 value 作为 prop 并将 change 作为事件
值绑定：对于单选按钮，复选框及选择框的选项，v-model 绑定的值通常是静态字符串 (对于复选框也可以是布尔值)：但是有时我们可能想把值绑定到 Vue 实例的一个动态属性上，这时可以用 v-bind 实现，并且这个属性的值可以不是字符串。
修饰符：
.lazy使用change事件进行同步
.number将用户输入值转为数值类型
.trim自动过滤用户输入的首尾空白字符
在组件上使用v-model

10.组件基础
基本示例
组件的复用：一个组件的 data 选项必须是一个函数
组件的组织：组件树，局部注册和全局注册
通过prop向子组件传递数据：
prop是你可以在组件上注册的一些自定义特性，当一个值传递给一个 prop 特性的时候，它就变成了那个组件实例的一个属性
Vue.component('blog-post', {
  props: ['title'],
  template: '<h3>{{ title }}</h3>'
})

<blog-post title="My journey with Vue"></blog-post>
<blog-post title="Blogging with Vue"></blog-post>
<blog-post title="Why Vue is so fun"></blog-post>
单个根元素:
<blog-post
  v-for="post in posts"
  v-bind:key="post.id"
  v-bind:post="post"
></blog-post>
Vue.component('blog-post', {
  props: ['post'],
  template: `
    <div class="blog-post">
      <h3>{{ post.title }}</h3>
      <div v-html="post.content"></div>
    </div>
  `
})
监听子组件事件:
父：
<div id="blog-posts-events-demo">
  <div :style="{ fontSize: postFontSize + 'em' }">
    <blog-post
      v-for="post in posts"
      v-bind:key="post.id"
      v-bind:post="post"
      v-on:enlarge-text="postFontSize += 0.1"
    ></blog-post>
  </div>
</div>
子：
Vue.component('blog-post', {
  props: ['post'],
  template: `
    <div class="blog-post">
      <h3>{{ post.title }}</h3>
      <button v-on:click="$emit('enlarge-text')">
         Enlarge text
      </button>
      <div v-html="post.content"></div>
    </div>
  `
})

为了让它正常工作，这个组件内的 <input> 必须：

将其 value 特性绑定到一个名叫 value 的 prop 上
在其 input 事件被触发时，将新的值通过自定义的 input 事件抛出

通过插槽分发内容：向一个组件传递内容，在需要的位置加上 <slot></slot>
动态组件：通过 Vue 的 <component> 元素加一个特殊的 is 特性来实现
<!-- 组件会在 `currentTabComponent` 改变时改变 -->
<component v-bind:is="currentTabComponent"></component>
在上述示例中，currentTabComponent 可以包括
已注册组件的名字，或一个组件的选项对象

解析DPOM模板时的注意事项：
<table>
  <tr is="blog-post-row"></tr>
</table>
需要注意的是如果我们从以下来源使用模板的话，这条限制是不存在的：

字符串 (例如：template: '...')
单文件组件 (.vue)
<script type="text/x-template">
